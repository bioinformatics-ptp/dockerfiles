
#
# *** INNODB Specific options ***
#

[mysqld]

# Use this option if you have a MySQL server with InnoDB support enabled
# but you do not plan to use it. This will save memory and disk space
# and speed up some things.
#skip-innodb

# Additional memory pool that is used by InnoDB to store metadata
# information.  If InnoDB requires more memory for this purpose it will
# start to allocate it from the OS.  As this is fast enough on most
# recent operating systems, you normally do not need to change this
# value. SHOW INNODB STATUS will display the current amount used.
# DEPRECATED FROM 5.6 and removed from 5.7
# innodb_additional_mem_pool_size = 16M

# InnoDB, unlike MyISAM, uses a buffer pool to cache both indexes and
# row data. The bigger you set this the less disk I/O is needed to
# access data in tables. On a dedicated database server you may set this
# parameter up to 80% of the machine physical memory size. Do not set it
# too large, though, because competition of the physical memory may
# cause paging in the operating system.  Note that on 32bit systems you
# might be limited to 2-3.5G of user level memory per process, so do not
# set it too high.
innodb_buffer_pool_size = 256M

# Maximum allowed percentage of dirty pages in the InnoDB buffer pool.
# If it is reached, InnoDB will start flushing them out agressively to
# not run out of clean pages at all. This is a soft limit, not
# guaranteed to be held.
innodb_max_dirty_pages_pct = 90

# Specifies the approximate percentage of the InnoDB buffer pool used for the old block
# sublist. The range of values is 5 to 95. The default value is 37 (that is, 3/8 of the pool).
# Often used in combination with innodb_old_blocks_time. See Section 14.3.3.3, “Making the
# Buffer Pool Scan Resistant” for more information. See Section 8.10.1, “The InnoDB Buffer
# Pool” for information about buffer pool management, such as the LRU algorithm and
# eviction policies.
# innodb_old_blocks_pct = 37

# Non-zero values protect against the buffer pool being filled up by data that is referenced
# only for a brief period, such as during a full table scan. Increasing this value offers more
# protection against full table scans interfering with data cached in the buffer pool.
# Specifies how long in milliseconds (ms) a block inserted into the old sublist must stay there a
# fter its first access before it can be moved to the new sublist. If the value is 0, a block
# inserted into the old sublist moves immediately to the new sublist the first time it is
# accessed, no matter how soon after insertion the access occurs. If the value is greater
# than 0, blocks remain in the old sublist until an access occurs at least that many ms after
# the first access. For example, a value of 1000 causes blocks to stay in the old sublist for 1
# second after the first access before they become eligible to move to the new sublist.
# The default value is 1000 as of MySQL 5.6.6, 0 before that. This variable is often used in
# combination with innodb_old_blocks_pct. See Section 14.3.3.3, “Making the Buffer Pool
# Scan Resistant” for more information. See Section 8.10.1, “The InnoDB Buffer Pool” for
# information about buffer pool management, such as the LRU algorithm and eviction policies.
# innodb_old_blocks_time = 1000

# Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer
# pool. You might increase this value for a MySQL server with heavy insert, update, and delete
# activity, or decrease it for a MySQL server with unchanging data used for reporting. For
# general I/O tuning advice, see Section 8.5.8, “Optimizing InnoDB Disk I/O”.
# innodb_change_buffer_max_size = 25

# The number of regions that the InnoDB buffer pool is divided into. For systems with buffer
# pools in the multi-gigabyte range, dividing the buffer pool into separate instances can
# improve concurrency, by reducing contention as different threads read and write to cached
# pages. Each page that is stored in or read from the buffer pool is assigned to one of the
# buffer pool instances randomly, using a hashing function. Each buffer pool manages its
# own free lists, flush lists, LRUs, and all other data structures connected to a buffer pool,
# and is protected by its own buffer pool mutex. This option takes effect only when you set
# the innodb_buffer_pool_size to a size of 1GB or more. The total size you specify is divided
# among all the buffer pools. For best efficiency, specify a combination of
# innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance
# is at least 1GB.
innodb_buffer_pool_instances = 4

# Specifies whether to record the pages cached in the InnoDB buffer pool when the MySQL
# server is shut down, to shorten the warmup process at the next restart. Typically used in
# combination with innodb_buffer_pool_load_at_startup. For related information, see Section
# 14.3.3.5, “Preloading the InnoDB Buffer Pool for Faster Restart”.
innodb_buffer_pool_dump_at_shutdown = 1

# Specifies that, on MySQL server startup, the InnoDB buffer pool is automatically warmed
# up by loading the same pages it held at an earlier time. Typically used in combination with
# innodb_buffer_pool_dump_at_shutdown. For related information, see Section 14.3.3.5,
# “Preloading the InnoDB Buffer Pool for Faster Restart”.
innodb_buffer_pool_load_at_startup = 1

# InnoDB stores data in one or more data files forming the tablespace.
# If you have a single logical drive for your data, a single
# autoextending file would be good enough. In other cases, a single file
# per device is often a good choice. You can configure InnoDB to use raw
# disk partitions as well - please refer to the manual for more info
# about this.
innodb_data_file_path = ibdata1:10M:autoextend:max:75G

# Set this option if you would like the InnoDB tablespace files to be
# stored in another location. By default this is the MySQL datadir.
#innodb_data_home_dir = <directory>

# The number of I/O threads for read operations in InnoDB. The default value is 4. Its counterpart
# for write threads is innodb_write_io_threads. See Section 14.3.7, “Configuring the Number of
# Background InnoDB I/O Threads” for more information. For general I/O tuning advice,
# see Section 8.5.8, “Optimizing InnoDB Disk I/O”.
innodb_read_io_threads = 8

# The number of I/O threads for write operations in InnoDB. The default value is 4. Its counterpart
# for read threads is innodb_read_io_threads. See Section 14.3.7, “Configuring the Number of
# Background InnoDB I/O Threads” for more information. For general I/O tuning advice, see
# Section 8.5.8, “Optimizing InnoDB Disk I/O”.
innodb_write_io_threads = 8


# The innodb_io_capacity parameter sets an upper limit on the I/O activity performed by the InnoDB
# background tasks, such as flushing pages from the buffer pool and merging data from the change
# buffer. The default value is 200. For busy systems capable of higher I/O rates, you can set a higher
# value at server startup, to help the server handle the background maintenance work associated
# with a high rate of row changes. The innodb_io_capacity limit is a total limit for all buffer pool
# instances. When dirty pages are flushed, the innodb_io_capacity limit is divided equally among buffer
# pool instances. For systems with individual 5400 RPM or 7200 RPM drives, you might lower the
# value to the former default of 100. This parameter should be set to approximately the number
# of I/O operations that the system can perform per second. Ideally, keep this setting as low as
# practical, but not so low that these background activities fall behind. If the value is too high, data
# is removed from the buffer pool and insert buffer too quickly to provide significant benefit from the
# caching.The value represents an estimated proportion of the I/O operations per second (IOPS)
# available to older-generation disk drives that could perform about 100 IOPS. The current default of
# 200 reflects that modern storage devices are capable of much higher I/O rates. In general, you
# can increase the value as a function of the number of drives used for InnoDB I/O, particularly fast
# drives capable of high numbers of IOPS. For example, systems that use multiple disks or solid-state
# disks for InnoDB are likely to benefit from the ability to control this parameter. Although you can
# specify a very high number, in practice such large values have little if any benefit; for example,
# a value of one million would be considered very high. You can set the innodb_io_capacity value
# to any number 100 or greater to a maximum defined by innodb_io_capacity_max. The default
# value is 200. You can set the value of this parameter in the MySQL option file (my.cnf or my.ini)
# or change it dynamically with the SET GLOBAL command, which requires the SUPER privilege.
# See Section 14.3.8, “Configuring the InnoDB Master Thread I/O Rate” for more guidelines about
# this option. For general information about InnoDB I/O performance, see Section 8.5.8, “Optimizing
# InnoDB Disk I/O”.
# innodb_io_capacity = 200

# The limit up to which InnoDB is allowed to extend the innodb_io_capacity setting in case of emergency.
# If you specify an innodb_io_capacity setting at startup and do not specify a value for innodb_io_capacity_max,
# the innodb_io_capacity_max value defaults to twice the value of innodb_io_capacity, with a lower limit of 2000.
# 2000 is also the initial default innodb_io_capacity_max configuration value.
# The innodb_io_capacity_max setting is a total limit for all buffer pool instances. For a brief period
# during MySQL 5.6 development, this variable was known as innodb_max_io_capacity. In MySQL 5.6.7,
# it was renamed to innodb_io_capacity_max, to emphasize its relationship to the innodb_io_capacity option.
# innodb_io_capacity_max = 400

# If you run into InnoDB tablespace corruption, setting this to a nonzero
# value will likely help you to dump your tables. Start from value 1 and
# increase it until you're able to dump the table successfully.
#innodb_force_recovery=1

# Number of threads allowed inside the InnoDB kernel. The optimal value
# depends highly on the application, hardware as well as the OS
# scheduler properties. A too high value may lead to thread thrashing.
# Consider setting this variable if your MySQL instance shares CPU resources with other applications,
# or if your workload or number of concurrent users is growing. The correct setting depends
# on workload, computing environment, and the version of MySQL that you are running. You
# will need to test a range of values to determine the setting that provides the best performance.
# innodb_thread_concurrency is a dynamic variable, which allows you to experiment with
# different settings on a live test system. If a particular setting performs poorly, you can
# quickly set innodb_thread_concurrency back to 0.
# innodb_thread_concurrency = 0

# If set to 1, InnoDB will flush (fsync) the transaction logs to the
# disk at each commit, which offers full ACID behavior. If you are
# willing to compromise this safety, and you are running small
# transactions, you may set this to 0 or 2 to reduce disk I/O to the
# logs. Value 0 means that the log is only written to the log file and
# the log file flushed to disk approximately once per second. Value 2
# means the log is written to the log file at each commit, but the log
# file is only flushed to disk approximately once per second.
innodb_flush_log_at_trx_commit = 1

# Speed up InnoDB shutdown. This will disable InnoDB to do a full purge
# and insert buffer merge on shutdown. It may increase shutdown time a
# lot, but InnoDB will have to do it on the next startup instead.
#innodb_fast_shutdown

# The size of the buffer InnoDB uses for buffering log data. As soon as
# it is full, InnoDB will have to flush it to disk. As it is flushed
# once per second anyway, it does not make sense to have it very large
# (even with long transactions).
innodb_log_buffer_size = 8M

# Size of each log file in a log group. You should set the combined size
# of log files to about 25%-100% of your buffer pool size to avoid
# unneeded buffer pool flush activity on log file overwrite. However,
# note that a larger logfile size will increase the time needed for the
# recovery process.
innodb_log_file_size = 64M

# Total number of files in the log group. A value of 2-3 is usually good
# enough.
innodb_log_files_in_group = 3

# Location of the InnoDB log files. Default is the MySQL datadir. You
# may wish to point it to a dedicated hard drive or a RAID1 volume for
# improved performance
#innodb_log_group_home_dir

# The flush method InnoDB will use for Log. The tablespace always uses
# doublewrite flush logic. The default value is "fdatasync", another
# option is "O_DSYNC".
#innodb_flush_method=O_DSYNC

# How long an InnoDB transaction should wait for a lock to be granted
# before being rolled back. InnoDB automatically detects transaction
# deadlocks in its own lock table and rolls back the transaction. If you
# use the LOCK TABLES command, or other transaction-safe storage engines
# than InnoDB in the same transaction, then a deadlock may arise which
# InnoDB cannot notice. In cases like this the timeout is useful to
# resolve the situation.
innodb_lock_wait_timeout = 120
