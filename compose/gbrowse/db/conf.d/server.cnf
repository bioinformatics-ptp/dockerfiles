
# This was formally known as [safe_mysqld]. Both versions are currently parsed.
[mysqld_safe]

# Increase the amount of open files allowed per process. Warning: Make
# sure you have set the global system limit high enough! The high value
# is required for a large number of opened tables
# the default docker file limit is 1M
# open_files_limit = 1048576

#
# * Fine Tuning
#

[mysqld]

# The maximum size of a query packet the server can handle as well as
# maximum query size server can process (Important when working with
# large BLOBs).  enlarged dynamically, for each connection.
max_allowed_packet	= 16M

# Thread stack size to use. This amount of memory is always reserved at
# connection time. MySQL itself usually needs no more than 64K of
# memory, while if you use your own stack hungry UDF functions or your
# OS requires more stack for some operations, you might need to set this
# to a higher value.
thread_stack		= 256K

# How many threads we should keep in a cache for reuse. When a client
# disconnects, the client's threads are put in the cache if there aren't
# more than thread_cache_size threads from before.  This greatly reduces
# the amount of thread creations needed if you have a lot of new
# connections. (Normally this doesn't give a notable performance
# improvement if you have a good thread implementation.)
thread_cache_size	= 8

# The maximum amount of concurrent sessions the MySQL server will
# allow. One of these connections will be reserved for a user with
# SUPER privileges to allow the administrator to login even if the
# connection limit has been reached.
max_connections        = 100

# The number of open tables for all threads. Increasing this value
# increases the number of file descriptors that mysqld requires.
# Therefore you have to make sure to set the amount of open files
# allowed to at least 4096 in the variable "open-files-limit" in
# section [mysqld_safe]
table_open_cache = 16384

# The number of table definitions that can be stored in the definition cache.
# If you use a large number of tables, you can create a large table definition
# cache to speed up opening of tables. The table definition cache takes less
# space and does not use file descriptors, unlike the normal table cache.
# The table definition cache takes less space and does not use file descriptors,
# unlike the normal table cache. The minimum value is 400. The default value
# is based on the following formula, capped to a limit of 2000:
table_definition_cache = 8592

# This permits the application to give the threads system a hint for the
# desired number of threads that should be run at the same time.  This
# value only makes sense on systems that support the thread_concurrency()
# function call (Sun Solaris, for example).
# You should try [number of CPUs]*(2..4) for thread_concurrency
# DEPRECATED IN MySQL 5.6, removed from 5.7
# thread_concurrency = 16

# Maximum allowed size for a single HEAP (in memory) table. This option
# is a protection against the accidential creation of a very large HEAP
# table which could otherwise use up all memory resources.
#
# Questa variabile influenza anche la variabile tmp_table_size, per cui
# non posso avere una variabile tmp_table_size piu' grande di max_head_table_size
max_heap_table_size = 128M

# Sort buffer is used to perform sorts for some ORDER BY and GROUP BY
# queries. If sorted data does not fit into the sort buffer, a disk
# based merge sort is used instead - See the "Sort_merge_passes"
# status variable. Allocated per thread if sort is needed.
sort_buffer_size = 2M

# This buffer is used for the optimization of full JOINs (JOINs without
# indexes). Such JOINs are very bad for performance in most cases
# anyway, but setting this variable to a large value reduces the
# performance impact. See the "Select_full_join" status variable for a
# count of full JOINs. Allocated per thread if full join is found
#
# A questo indirizzo (http://www.mysqlperformanceblog.com/2010/07/05/how-is-join_buffer_size-allocated/)
# ho visto che questa memoria e' allocata per Join per Thread (e non solo
# per thread come tutte le altre storie). Per questo puo' essere rischioso
# un valore >= 4M (come suggerisce tuning-primer.sh)
join_buffer_size = 1M

# Maximum size for internal (in-memory) temporary tables. If a table
# grows larger than this value, it is automatically converted to disk
# based table This limitation is for a single table. There can be many
# of them.
tmp_table_size = 128M

#
# * Query Cache Configuration
#

# Only cache result sets that are smaller than this limit. This is to
# protect the query cache of a very large result set overwriting all
# other query results.
query_cache_limit = 2M

# Questa variabile dovrebbe impostare la dimensione minima di una query
# per poter essere memorizzata nella query cache
query_cache_min_res_unit = 4K

# Query cache is used to cache SELECT results and later return them
# without actual executing the same query once again. Having the query
# cache enabled may result in significant speed improvements, if your
# have a lot of identical queries and rarely changing tables. See the
# "Qcache_lowmem_prunes" status variable to check if the current value
# is high enough for your load.
# Note: In case your tables change very often or if your queries are
# textually different every time, the query cache may result in a
# slowdown instead of a performance improvement.
query_cache_size = 128M

# Set the query cache type. Setting the GLOBAL value sets the type for all clients that
# connect thereafter. Individual clients can set the SESSION value to affect their own use
# of the query cache. Possible values are shown in the following table:
# Option	Description
# 0 or OFF	Do not cache results in or retrieve results from the query cache. Note that this does not
#               deallocate the query cache buffer. To do that, you should set query_cache_size to 0.
# 1 or ON	Cache all cacheable query results except for those that begin with SELECT SQL_NO_CACHE.
# 2 or DEMAND	Cache results only for cacheable queries that begin with SELECT SQL_CACHE.
# Cache all cacheable query results except for those that begin with SELECT SQL_NO_CACHE.
query_cache_type = ON

###QUERY CACHE IS DISABLED
###THE QUERY CACHE IN MYSQL CLUSTER  CAN HAMPER PERFORMANCE A LOT. HENCE IT IS DISABLED
###BECAUSE INVALIDATION OF IT TAKES TIME (REMEMBER, IT IS A DISTRIBUTED ENVIRONMENT)
###ONLY ENABLE IT AND USE SQL_CACHE TO CACHE ONLY CERTAIN QUERIES ON READONLY TABLES
#query-cache-size = 0
